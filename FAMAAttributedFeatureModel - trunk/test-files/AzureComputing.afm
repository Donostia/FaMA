%Relationships

VM: Instance OS Storage Area TechSpecs Use;

Instance: [1,1]{A0 A1 A2 A3 A4 A5 A6 A7};

OS: [1,1]{LinuxBased WindowsBased};
LinuxBased: Linux;
WindowsBased: [1,1]{WindowsServer SQLServer};
SQLServer: [1,1]{WindowsSQLWeb WindowsSQLStd WindowsSQLEnterprise};

Storage: [GeoRedundant];

Area: [1,1]{NorthAmerica SouthAmerica Europe AsiaOceania};
NorthAmerica:[1,1]{USWest USEast};
Europe: [1,1]{EuropeWest EuropeNorth};
AsiaOceania:[1,1]{AsiaPacificEast AsiaPacificSouthwest};
Use:[PayInAdvance];


%Attributes

VM.cost: Real[0.000 to 100000.000],0,0;
VM.costHour: Real[0.000 to 10.000],0,0;
VM.fixedCost: Real[0.000 to 100000.000],0,0;
VM.discount: Real[0.000 to 100000.000],0,0;
Use.usage: Integer[0 to 720],0,0; ##hours per month
Use.period: Integer[0 to 36],0,0; ##months (0 implies on demand)

Storage.size: Integer[0 to 100000],0,0; ## from 0 GB to 100 TB
TechSpecs.cores: Integer[1 to 8],0,0; ## maximum: 8 cores 
TechSpecs.ram: Real[1 to 56],0,0; ## from 256 MB to 56 GB

Storage.costGB: Real[0.000 to 0.100],0,0; ## dollars
Storage.cost: Real[0.00 to 50000.00],0,0; ## dollars per month



%Constraints

## Instances characteristics ##
A0 IMPLIES (TechSpecs.cores == 1 AND TechSpecs.ram == 1 AND Storage.size <= 1000);
A1 IMPLIES (TechSpecs.cores == 1 AND TechSpecs.ram == 2 AND Storage.size <= 2000);
A2 IMPLIES (TechSpecs.cores == 2 AND TechSpecs.ram == 4 AND Storage.size <= 4000);
A3 IMPLIES (TechSpecs.cores == 4 AND TechSpecs.ram == 7 AND Storage.size <= 8000);
A4 IMPLIES (TechSpecs.cores == 8 AND TechSpecs.ram == 14 AND Storage.size <= 16000);
A5 IMPLIES (TechSpecs.cores == 2 AND TechSpecs.ram == 14 AND Storage.size <= 4000);
A6 IMPLIES (TechSpecs.cores == 4 AND TechSpecs.ram == 28 AND Storage.size <= 8000);
A7 IMPLIES (TechSpecs.cores == 8 AND TechSpecs.ram == 56 AND Storage.size <= 16000);

##Cost policies##
VM.cost == VM.costHour*Use.usage + Storage.cost;
Storage.cost == Storage.costGB*Storage.size;

(Storage.size <= 1000  AND NOT GeoRedundant) IMPLIES Storage.costGB==0.07;
(Storage.size > 1000  AND NOT GeoRedundant) IMPLIES Storage.costGB==0.065;
(Storage.size <= 1000  AND GeoRedundant) IMPLIES Storage.costGB==0.095;
(Storage.size > 1000  AND GeoRedundant) IMPLIES Storage.costGB==0.08;


##Discount policies##
((NOT PayInAdvance) AND VM.cost >= 500 AND VM.cost < 15000 AND Use.period >= 6 AND Use.period <12) IMPLIES VM.discount == VM.cost*0.20;
((NOT PayInAdvance) AND VM.cost >= 15000 AND VM.cost < 40000 AND Use.period >= 6 AND Use.period <12) IMPLIES VM.discount == VM.cost*0.23;
((NOT PayInAdvance) AND VM.cost >= 40000 AND Use.period >= 6 AND Use.period <12) IMPLIES VM.discount == VM.cost*0.27;
((NOT PayInAdvance) AND VM.cost >= 500 AND VM.cost < 15000 AND Use.period >=12) IMPLIES VM.discount == VM.cost*0.225;
((NOT PayInAdvance) AND VM.cost >= 15000 AND VM.cost < 40000 AND Use.period >=12) IMPLIES VM.discount == VM.cost*0.255;
((NOT PayInAdvance) AND VM.cost >= 40000 AND Use.period >=12) IMPLIES VM.discount == VM.cost*0.295;

(PayInAdvance AND VM.cost >= 500 AND VM.cost < 15000 AND Use.period >= 6 AND Use.period <12) IMPLIES VM.discount == VM.cost*0.225;
(PayInAdvance AND VM.cost >= 15000 AND VM.cost < 40000 AND Use.period >= 6 AND Use.period <12) IMPLIES VM.discount == VM.cost*0.255;
(PayInAdvance AND VM.cost >= 40000 AND Use.period >= 6 AND Use.period <12) IMPLIES VM.discount == VM.cost*0.295;
(PayInAdvance AND VM.cost >= 500 AND VM.cost < 15000 AND Use.period >=12) IMPLIES VM.discount == VM.cost*0.25;
(PayInAdvance AND VM.cost >= 15000 AND VM.cost < 40000 AND Use.period >=12) IMPLIES VM.discount == VM.cost*0.28;
(PayInAdvance AND VM.cost >= 40000 AND Use.period >=12) IMPLIES VM.discount == VM.cost*0.32;


##Cost details#
(WindowsServer AND A0) IMPLIES VM.costHour==0.02;
(WindowsServer AND A1) IMPLIES VM.costHour==0.09;
(WindowsServer AND A2) IMPLIES VM.costHour==0.18;
(WindowsServer AND A3) IMPLIES VM.costHour==0.36;
(WindowsServer AND A4) IMPLIES VM.costHour==0.72;
(WindowsServer AND A5) IMPLIES VM.costHour==0.4;
(WindowsServer AND A6) IMPLIES VM.costHour==0.8;
(WindowsServer AND A7) IMPLIES VM.costHour==1.6;

(Linux AND A0) IMPLIES VM.costHour==0.02;
(Linux AND A1) IMPLIES VM.costHour==0.06;
(Linux AND A2) IMPLIES VM.costHour==0.12;
(Linux AND A3) IMPLIES VM.costHour==0.24;
(Linux AND A4) IMPLIES VM.costHour==0.48;
(Linux AND A5) IMPLIES VM.costHour==0.32;
(Linux AND A6) IMPLIES VM.costHour==0.64;
(Linux AND A7) IMPLIES VM.costHour==1.29;

(WindowsSQLWeb AND A0) IMPLIES VM.costHour==0.065;
(WindowsSQLWeb AND A1) IMPLIES VM.costHour==0.135;
(WindowsSQLWeb AND A2) IMPLIES VM.costHour==0.225;
(WindowsSQLWeb AND A3) IMPLIES VM.costHour==0.405;
(WindowsSQLWeb AND A4) IMPLIES VM.costHour==0.81;
(WindowsSQLWeb AND A5) IMPLIES VM.costHour==0.445;
(WindowsSQLWeb AND A6) IMPLIES VM.costHour==0.845;
(WindowsSQLWeb AND A7) IMPLIES VM.costHour==1.69;

(WindowsSQLStd AND A0) IMPLIES VM.costHour==0.57;
(WindowsSQLStd AND A1) IMPLIES VM.costHour==0.64;
(WindowsSQLStd AND A2) IMPLIES VM.costHour==0.73;
(WindowsSQLStd AND A3) IMPLIES VM.costHour==0.91;
(WindowsSQLStd AND A4) IMPLIES VM.costHour==1.82;
(WindowsSQLStd AND A5) IMPLIES VM.costHour==0.95;
(WindowsSQLStd AND A6) IMPLIES VM.costHour==1.35;
(WindowsSQLStd AND A7) IMPLIES VM.costHour==2.7;

(WindowsSQLEnterprise AND A0) IMPLIES VM.costHour==2.12;
(WindowsSQLEnterprise AND A1) IMPLIES VM.costHour==2.19;
(WindowsSQLEnterprise AND A2) IMPLIES VM.costHour==2.28;
(WindowsSQLEnterprise AND A3) IMPLIES VM.costHour==2.46;
(WindowsSQLEnterprise AND A4) IMPLIES VM.costHour==4.92;
(WindowsSQLEnterprise AND A5) IMPLIES VM.costHour==2.5;
(WindowsSQLEnterprise AND A6) IMPLIES VM.costHour==2.9;
(WindowsSQLEnterprise AND A7) IMPLIES VM.costHour==5.8;